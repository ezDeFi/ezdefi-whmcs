<?php

require dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '\init.php';

use PHPUnit\Framework\TestCase;
use WHMCS\Database\Capsule;
use WHMCS\Module\Gateway\Ezdefi\EzdefiDb;

class EzdefiDbTest extends TestCase
{
	public $db;

	protected function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub

		$this->db = new EzdefiDb();
	}

	protected function tearDown(): void {
		parent::tearDown(); // TODO: Change the autogenerated stub

		$this->clearAmountIdsTable();
	}

	public function testCanGetAmountIdsWithRightOrder()
	{
		Capsule::table('tblezdefiamountids')->insert([
			['price' => 1.00, 'amount_id' => 1.00, 'amount_decimal' => 6, 'amount_valid' => 1, 'currency' => 'nusd'],
			['price' => 1.00, 'amount_id' => 1.000001, 'amount_decimal' => 6, 'amount_valid' => 1, 'currency' => 'nusd'],
			['price' => 1.00, 'amount_id' => 0.999999, 'amount_decimal' => 6, 'amount_valid' => 1, 'currency' => 'nusd'],
			['price' => 1.00, 'amount_id' => 1.00, 'amount_decimal' => 6, 'amount_valid' => 1, 'currency' => 'ntf'],
		]);

		$actual = $this->db->get_amount_ids(1.00,6,'nusd');

		$expected = array(
			array(
				'price' => 1.00,
				'amount_id' => 1.00,
				'amount_decimal' => 6,
				'amount_valid' => 1,
				'currency' => 'nusd',
				'amount_abs' => 0.000000
			),
			array(
				'price' => 1.00,
				'amount_id' => 0.999999,
				'amount_decimal' => 6,
				'amount_valid' => 1,
				'currency' => 'nusd',
				'amount_abs' => 0.000001
			),
			array(
				'price' => 1.00,
				'amount_id' => 1.000001,
				'amount_decimal' => 6,
				'amount_valid' => 1,
				'currency' => 'nusd',
				'amount_abs' => 0.000001
			)
		);

		$this->assertEquals($expected, $actual);
	}

	public function testCanGenerateAmountId()
	{
		// Use price as amount_id when there is no record
		$actual = $this->db->generate_amount_id(1.00, 'nusd');
		$expected = 1.00;
		$record = Capsule::table('tblezdefiamountids')->where('amount_id', $expected)->where('currency', 'nusd')->get();

		$this->assertEquals($expected, $actual);
		$this->assertCount(1, $record);

		$this->clearAmountIdsTable();

		// Find and use first record has amount_valid equal 1
		Capsule::table('tblezdefiamountids')->insert([
			['price' => 1.00, 'amount_id' => 1.00, 'amount_decimal' => 6, 'amount_valid' => 0, 'currency' => 'nusd'],
			['price' => 1.00, 'amount_id' => 1.000001, 'amount_decimal' => 6, 'amount_valid' => 1, 'currency' => 'nusd'],
			['price' => 1.00, 'amount_id' => 0.999999, 'amount_decimal' => 6, 'amount_valid' => 1, 'currency' => 'nusd'],
		]);
		$actual = $this->db->generate_amount_id(1.00, 'nusd');
		$expected = 0.999999;

		$this->assertEquals($expected, $actual);

		$this->clearAmountIdsTable();

		// If only have one record, plus one unit and return
		Capsule::table('tblezdefiamountids')->insert(
			['price' => 1.00, 'amount_id' => 1.00, 'amount_decimal' => 6, 'amount_valid' => 0, 'currency' => 'nusd']
		);
		$actual = $this->db->generate_amount_id(1.00, 'nusd');
		$expected = 1.000001;
		$record = Capsule::table('tblezdefiamountids')->where('price', 1.00)->where('currency', 'nusd')->get();

		$this->assertEquals($expected, $actual);
		$this->assertCount(2, $record);

		$this->clearAmountIdsTable();

		// Create new opposite number
		Capsule::table('tblezdefiamountids')->insert([
			['price' => 1.00, 'amount_id' => 1.00, 'amount_decimal' => 6, 'amount_valid' => 0, 'currency' => 'nusd'],
			['price' => 1.00, 'amount_id' => 1.000001, 'amount_decimal' => 6, 'amount_valid' => 0, 'currency' => 'nusd'],
			['price' => 1.00, 'amount_id' => 0.999999, 'amount_decimal' => 6, 'amount_valid' => 0, 'currency' => 'nusd'],
		]);

		$actual = $this->db->generate_amount_id(1.00, 'nusd');
		$expected = 1.000002;

		$this->assertEquals($expected, $actual);

		$this->clearAmountIdsTable();

		Capsule::table('tblezdefiamountids')->insert([
			['price' => 1.00, 'amount_id' => 1.00, 'amount_decimal' => 6, 'amount_valid' => 0, 'currency' => 'nusd'],
			['price' => 1.00, 'amount_id' => 1.000001, 'amount_decimal' => 6, 'amount_valid' => 0, 'currency' => 'nusd'],
		]);

		$actual = $this->db->generate_amount_id(1.00, 'nusd');
		$expected = 0.999999;

		$this->assertEquals($expected, $actual);

		$this->clearAmountIdsTable();

		Capsule::table('tblezdefiamountids')->insert([
			['price' => 1.00, 'amount_id' => 1.00, 'amount_decimal' => 6, 'amount_valid' => 0, 'currency' => 'nusd'],
			['price' => 1.00, 'amount_id' => 0.999999, 'amount_decimal' => 6, 'amount_valid' => 0, 'currency' => 'nusd'],
		]);

		$actual = $this->db->generate_amount_id(1.00, 'nusd');
		$expected = 1.000001;

		$this->assertEquals($expected, $actual);

		$this->clearAmountIdsTable();
	}

	public function clearAmountIdsTable()
	{
		Capsule::table('tblezdefiamountids')->delete();
	}
}